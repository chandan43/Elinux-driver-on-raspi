Kernel Porting on RaspberryPi 3 b and GPIO,I2c,SPI and CAN platform device driver for RaspberryPi 3 b
=====================================================================================================
## use https://www.raspberrypi.org/documentation/installation/installing-images/linux.md link to install OS.

1. Install toolchain for RaspberryPi 3 b
   =====================================
   Use the following command to download the toolchain to the home folder:
   #git clone https://github.com/raspberrypi/tools ~/tools

   If you are on a 64-bit host system, you should use:
   #echo PATH=\$PATH:~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin >> ~/.bashrc
   source ~/.bashrc
2. Kernel building RaspberryPi 3 b
   ===============================
   #git clone --depth=1 https://github.com/raspberrypi/linux
   cd linux
   KERNEL=kernel7
   make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig

   Then, for both:

   make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs

   Note: To speed up compilation on multiprocessor systems, and get some improvement 
         on single processor ones, use -j n, where n is the number of processors * 1.5. 
	 Alternatively, feel free to experiment and see what works!

3. Install directly onto the SD card
   =================================
   mkdir /tmp/mnt
   mkdir /tmp/mnt/fat32
   mkdir /tmp/mnt/ext4
   sudo mount /dev/sdb1 /tmp/mnt/fat32
   sudo mount /dev/sdb2 /tmp/mnt/ext4

   Next, install the modules:

   sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/tmp/mnt/ext4 modules_install

   Finally, copy the kernel and Device Tree blobs onto the SD card, making sure to back up your old kernel:

   sudo cp /tmp/mnt/fat32/$KERNEL.img /tmp/mnt/fat32/$KERNEL-backup.img
   sudo cp arch/arm/boot/zImage /tmp/mnt/fat32/$KERNEL.img
   sudo cp arch/arm/boot/dts/*.dtb /tmp/mnt/fat32/
   sudo cp arch/arm/boot/dts/overlays/*.dtb* /tmp/mnt/fat32/overlays/
   sudo cp arch/arm/boot/dts/overlays/README /tmp/mnt/fat32/overlays/
   sudo umount /tmp/mnt/fat32
   sudo umount /tmp/mnt/ext4
 
  another option is to copy the kernel into the same place, but with a 
  different filename - for instance, kernel-myconfig.img - rather than 
  overwriting the kernel.img file. You can then edit the config.txt file 
  to select the kernel that the Pi will boot into:

4.Driver use
  ==========
a).Compiling the driver
  #make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-

  #make clean
b).Loading and unloading driver 
  #insmod driver_name.ko
  #rmmod driver_name.ko

